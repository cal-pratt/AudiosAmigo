<#@ template debug="false" hostspecific="true" language="C#"
#><#@ assembly name="System.Core"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Text"
#><#@ import namespace="System.Collections.Generic"
#><#@ output extension=".cs"
#><#@ assembly name="System.Xml.dll"
#><#@ import namespace="System.Xml"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Text.RegularExpressions"
#><# var fileName = this.Host.ResolvePath("CommandHandler.cs");
var fileString = File.ReadAllText(fileName).Replace("\n", " ");
var methodPattern = @"void\s+([^ ]*)\s*\(([^)]*)\);";
var parameterPattern = @"\s*([^ ,]*)\s+([^ ,]*\s*)";
var methodMatches = Regex.Matches(fileString, methodPattern);
#>/*************************************************************************************************
*************          THIS IS A GENERATED CLASS! DO NOT EDIT DIRECTLY !!!           *************
*************************************************************************************************/

using System;
using System.Reactive.Subjects;
namespace AudiosAmigo
{
    public abstract partial class CommandHandler : IObservable<Command>
    {
        private readonly Subject<Command> _subject = new Subject<Command>();

        public IDisposable Subscribe(IObserver<Command> observer)
        {
            return _subject.Subscribe(observer);
        }<#
foreach (Match matchMatch in methodMatches)
{
    var method = matchMatch.Groups[1].Value;
    var parameterMatches = Regex.Matches(matchMatch.Groups[2].Value, parameterPattern);#>

        public void Send<#=method#>Command(<# 
    var first = true;
    foreach (Match parameterMatch in parameterMatches)
    {
        var className = parameterMatch.Groups[1].Value;
        var variableName = parameterMatch.Groups[2].Value;
        if (!first) #>,<#
        first = false;#>
            <#=className#> <#=variableName#><#
    }#>)
        {
            _subject.OnNext(new Command
            {
                Action = "<#=method#>",
                Parameters = new string[] 
                {<# 
    first = true;
    foreach (Match parameterMatch in parameterMatches)
    {
        var className = parameterMatch.Groups[1].Value;
        var variableName = parameterMatch.Groups[2].Value;
        if (!first) #>,<#
        first = false;
        if (className.ToLower() == "string") {#>
                    <#=variableName#><#
        }else {#>
                    Translate.ObjectToString(<#=variableName#>)<#
        }
    }#>
                }
            });
        }<#
}#>
    }
}
