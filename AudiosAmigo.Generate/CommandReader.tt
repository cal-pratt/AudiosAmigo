<#@ template debug="false" hostspecific="true" language="C#" 
#><#@ assembly name="System.Core"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Text"
#><#@ import namespace="System.Collections.Generic"
#><#@ output extension=".cs"
#><#@ assembly name="System.Xml.dll"
#><#@ import namespace="System.Xml"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Text.RegularExpressions"
#><# 

var fileName = this.Host.ResolvePath("CommandHandler.cs");
var fileString = File.ReadAllText(fileName).Replace("\n", " ");
var methodPattern = @"void\s+([^ ]*)\s*\(([^)]*)\);";
var parameterPattern = @"\s*([^ ,]*)\s+([^ ,]*\s*)";
var methodMatches = Regex.Matches(fileString, methodPattern);

#>/*************************************************************************************************
*************          THIS IS A GENERATED CLASS! DO NOT EDIT DIRECTLY !!!           *************
*************************************************************************************************/

using System;
namespace AudiosAmigo
{
    public abstract partial class CommandHandler : IObserver<Command>
    {
        public abstract void OnError(Exception error);

        public abstract void OnCompleted();

        public void OnNext(Command command)
        {
            switch (command?.Action)
            {<#
foreach (Match matchMatch in methodMatches)
{
    var method = matchMatch.Groups[1].Value;
    var parameterMatches = Regex.Matches(matchMatch.Groups[2].Value, parameterPattern);#>
                case "<#=method#>":
                    <#=method#>(<#
    for(int i = 0; i < parameterMatches.Count; i++)
    {
        var className = parameterMatches[i].Groups[1].Value;
        if (i != 0) #>,<#
        if (className.ToLower() == "string") {#>
                        command.Parameters[<#=i#>]<#
        }else {#>
                        Translate.StringToObject<<#=className#>>(command.Parameters[<#=i#>])<#
        }
    }
#>);
                    break;
<#
}
#>            }
        }
    }
}
